// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DogServiceClient is the client API for DogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DogServiceClient interface {
	CreateDog(ctx context.Context, in *CreateDogRequest, opts ...grpc.CallOption) (*CreateDogResponse, error)
	GetDog(ctx context.Context, in *GetDogRequest, opts ...grpc.CallOption) (*GetDogResponse, error)
	UpdateDog(ctx context.Context, in *UpdateDogRequest, opts ...grpc.CallOption) (*UpdateDogResponse, error)
	DeleteDog(ctx context.Context, in *DeleteDogRequest, opts ...grpc.CallOption) (*DeleteDogResponse, error)
	ListDog(ctx context.Context, in *ListDogRequest, opts ...grpc.CallOption) (DogService_ListDogClient, error)
}

type dogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDogServiceClient(cc grpc.ClientConnInterface) DogServiceClient {
	return &dogServiceClient{cc}
}

func (c *dogServiceClient) CreateDog(ctx context.Context, in *CreateDogRequest, opts ...grpc.CallOption) (*CreateDogResponse, error) {
	out := new(CreateDogResponse)
	err := c.cc.Invoke(ctx, "/src.DogService/CreateDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogServiceClient) GetDog(ctx context.Context, in *GetDogRequest, opts ...grpc.CallOption) (*GetDogResponse, error) {
	out := new(GetDogResponse)
	err := c.cc.Invoke(ctx, "/src.DogService/GetDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogServiceClient) UpdateDog(ctx context.Context, in *UpdateDogRequest, opts ...grpc.CallOption) (*UpdateDogResponse, error) {
	out := new(UpdateDogResponse)
	err := c.cc.Invoke(ctx, "/src.DogService/UpdateDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogServiceClient) DeleteDog(ctx context.Context, in *DeleteDogRequest, opts ...grpc.CallOption) (*DeleteDogResponse, error) {
	out := new(DeleteDogResponse)
	err := c.cc.Invoke(ctx, "/src.DogService/DeleteDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogServiceClient) ListDog(ctx context.Context, in *ListDogRequest, opts ...grpc.CallOption) (DogService_ListDogClient, error) {
	stream, err := c.cc.NewStream(ctx, &DogService_ServiceDesc.Streams[0], "/src.DogService/ListDog", opts...)
	if err != nil {
		return nil, err
	}
	x := &dogServiceListDogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DogService_ListDogClient interface {
	Recv() (*ListDogResponse, error)
	grpc.ClientStream
}

type dogServiceListDogClient struct {
	grpc.ClientStream
}

func (x *dogServiceListDogClient) Recv() (*ListDogResponse, error) {
	m := new(ListDogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DogServiceServer is the server API for DogService service.
// All implementations must embed UnimplementedDogServiceServer
// for forward compatibility
type DogServiceServer interface {
	CreateDog(context.Context, *CreateDogRequest) (*CreateDogResponse, error)
	GetDog(context.Context, *GetDogRequest) (*GetDogResponse, error)
	UpdateDog(context.Context, *UpdateDogRequest) (*UpdateDogResponse, error)
	DeleteDog(context.Context, *DeleteDogRequest) (*DeleteDogResponse, error)
	ListDog(*ListDogRequest, DogService_ListDogServer) error
	mustEmbedUnimplementedDogServiceServer()
}

// UnimplementedDogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDogServiceServer struct {
}

func (UnimplementedDogServiceServer) CreateDog(context.Context, *CreateDogRequest) (*CreateDogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDog not implemented")
}
func (UnimplementedDogServiceServer) GetDog(context.Context, *GetDogRequest) (*GetDogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDog not implemented")
}
func (UnimplementedDogServiceServer) UpdateDog(context.Context, *UpdateDogRequest) (*UpdateDogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDog not implemented")
}
func (UnimplementedDogServiceServer) DeleteDog(context.Context, *DeleteDogRequest) (*DeleteDogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDog not implemented")
}
func (UnimplementedDogServiceServer) ListDog(*ListDogRequest, DogService_ListDogServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDog not implemented")
}
func (UnimplementedDogServiceServer) mustEmbedUnimplementedDogServiceServer() {}

// UnsafeDogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DogServiceServer will
// result in compilation errors.
type UnsafeDogServiceServer interface {
	mustEmbedUnimplementedDogServiceServer()
}

func RegisterDogServiceServer(s grpc.ServiceRegistrar, srv DogServiceServer) {
	s.RegisterService(&DogService_ServiceDesc, srv)
}

func _DogService_CreateDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).CreateDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DogService/CreateDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).CreateDog(ctx, req.(*CreateDogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogService_GetDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).GetDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DogService/GetDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).GetDog(ctx, req.(*GetDogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogService_UpdateDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).UpdateDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DogService/UpdateDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).UpdateDog(ctx, req.(*UpdateDogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogService_DeleteDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).DeleteDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DogService/DeleteDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).DeleteDog(ctx, req.(*DeleteDogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogService_ListDog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DogServiceServer).ListDog(m, &dogServiceListDogServer{stream})
}

type DogService_ListDogServer interface {
	Send(*ListDogResponse) error
	grpc.ServerStream
}

type dogServiceListDogServer struct {
	grpc.ServerStream
}

func (x *dogServiceListDogServer) Send(m *ListDogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DogService_ServiceDesc is the grpc.ServiceDesc for DogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "src.DogService",
	HandlerType: (*DogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDog",
			Handler:    _DogService_CreateDog_Handler,
		},
		{
			MethodName: "GetDog",
			Handler:    _DogService_GetDog_Handler,
		},
		{
			MethodName: "UpdateDog",
			Handler:    _DogService_UpdateDog_Handler,
		},
		{
			MethodName: "DeleteDog",
			Handler:    _DogService_DeleteDog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDog",
			Handler:       _DogService_ListDog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/dog.proto",
}
